// resets
body {
  margin: 0;
}
img {
  max-width: 100%;
}

*, *::before, *::after {
  box-sizing: border-box;
}

// tipography
@import url('https://fonts.googleapis.com/css2?family=Roboto+Slab:wght@300;400;700&display=swap');
html {
  font-family: 'Roboto Slab', serif;
  color: darkslategray;
}

body {
  background-color: #f0f0f0;
}

header {

  --avatar: 100px;
    
  .hero {
    background-color: rgb(92, 186, 230);
    background-image: url("./images/gato.jpg");
    background-size: cover;
    background-position: center center;
    min-height: 200px;
    position: relative;
    padding: 20px;

    display: grid;
    place-items: center;
  }

  .hero::after {
    content: "";
    position: absolute;
    background-color: rgba(0,0,0,0.5);
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 1;
  }

  h1 {
    position: relative;
    z-index: 2;
    color: white;
    text-align: center;
    margin: calc(var(--avatar) / 2);
  }

  .autor {

    position: relative;
    top: calc(var(--avatar) / 2 * -1);
    z-index: 3;

    img {
      border-radius: 500px;
      width: var(--avatar);
      margin: 0 auto;
      display: block;
      border: 4px solid #f0f0f0;
    }

    h2 {
      text-align: center;
      margin: 0;
    }
  }
}

.flex-toggle {
  display: block;
  margin-left: auto;
  margin-right: auto;
  background: #8c8ae4;
  border: none;
  color: white;
  font-size: 0.8em;
  font-family: inherit;
  border-radius: 5px;
  padding: 0.25em 0.5em;
  cursor: pointer;
}

.main-content {
  // clamp(min, ideal, max)
  // Min(o menor dos dois) — com M pq min() é função de SASS e ele não aceita misturar % com px — pq bom, ele não sabe a % da tela já que é pre processado ¯\_(ツ)_/¯
  width: clamp(Min(96%, 500px), 66.67%, 800px);
  margin-left: auto;
  margin-right: auto;
  padding-bottom: 100px;

  .card {
    padding: 25px 15px 10px;
    margin: 20px 10px;
    border: 1px solid #d1d1d1;
    border-radius: 16px;
    background-color: white;
  }

  h1 {
    font-size: 24pt;
    margin: 0;
  }

  h2 {
    font-size: 16pt;
    color: #8f8f8f;
    font-weight: 300;
    font-style: italic;
  }

  p {
    line-height: 1.5;
    margin-bottom: 1.5em;
  }

  img {
    width: 100%;
    border-radius: 8px;
  }
}


.interaction-block {
  display: flex;
  align-items: flex-start;
}

.interaction-element {
  // border: 2px solid blue;
  display: flex;
  align-items: center;
  flex-basis: 150px;

  p {
    margin: 0 2em 0 0.25em;
  }
}

.heart,
.broken {
  border: none;
  width: 50px;
  height: 50px;
  cursor: pointer;
  border-radius: 50px;
  background-color: transparent;

  &:focus, &:hover {
    background-color: #f3f3f3;
  }
  &:focus {
    outline: none;
    box-shadow: inset 0 0 0 2px #8b8ae4;
  }
}

.heart {
  // sprite size: 2900x100 — 28 frames
  background-image: url("./images/heart-sprite.png");
  background-repeat: no-repeat;
  width: 50px;
  height: 50px;
  background-size: cover;
  background-position: 0 0;
}
.heart.active {
  transition: background-position 1s steps(28);
  background-position: -1400px 0;
}

.broken {
  background: rgb(243, 243, 243);
}

.broken.active {
  background: grey;
}



// added on .main-content with JS
.flex {
  width: 100%;
  display: flex;
  flex-flow: row wrap;
  justify-content: center;
  align-items: flex-start;

  .card {
    width: clamp(350px, 30%, 600px);
    flex-grow: 1;
  }
}



footer {
  text-align: center;
  font-size: 0.8rem;

  a { color: #8c8ae4; }
}